{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Drew\\\\Documents\\\\The Modern React Bootcamp\\\\Lights_Out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Drew\\\\Documents\\\\The Modern React Bootcamp\\\\Lights_Out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Drew\\\\Documents\\\\The Modern React Bootcamp\\\\Lights_Out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Drew\\\\Documents\\\\The Modern React Bootcamp\\\\Lights_Out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Drew\\\\Documents\\\\The Modern React Bootcamp\\\\Lights_Out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Drew\\\\Documents\\\\The Modern React Bootcamp\\\\Lights_Out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Drew\\\\Documents\\\\The Modern React Bootcamp\\\\Lights_Out\\\\react-lights-out-starter\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        var row = [];\n\n        for (var j = 0; j < this.props.ncols; j++) {\n          row.push(false); //Math.random() < this.props.chanceLightStartsOn\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      flipCell(y, x);\n      flipCell(y, x + 1);\n      flipCell(y, x - 1);\n      flipCell(y + 1, x);\n      flipCell(y - 1, x); // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n\n      var hasWon = false;\n      var count = 0;\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        for (var j = 0; j < this.props.ncols; j++) {\n          if (board[i][j] === false) {\n            count++;\n            console.log(count);\n          }\n        }\n      }\n\n      if (count === this.props.nrows * this.props.ncols) {\n        hasWon = true;\n      }\n\n      console.log(count); // TODO: determine is the game has been won\n\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n  }, {\n    key: \"renderBoard\",\n    value: function renderBoard() {\n      var _this2 = this;\n\n      var printBoard = [];\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        var row = [];\n\n        var _loop = function _loop() {\n          var coord = \"\".concat(i, \"-\").concat(j);\n          row.push(React.createElement(Cell, {\n            key: coord,\n            isLit: _this2.state.board[i][j],\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(coord);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 120\n            },\n            __self: this\n          }));\n        };\n\n        for (var j = 0; j < this.props.ncols; j++) {\n          _loop();\n        }\n\n        printBoard.push(React.createElement(\"tr\", {\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, row));\n      }\n\n      return printBoard;\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return (// if the game is won, just show a winning msg & render nothing else\n        // TODO\n        // make table board\n        React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, React.createElement(\"table\", {\n          className: \"Board\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, React.createElement(\"tbody\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, this.renderBoard()))) // TODO\n\n      );\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["C:\\Users\\Drew\\Documents\\The Modern React Bootcamp\\Lights_Out\\react-lights-out-starter\\src\\Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","i","nrows","row","j","ncols","push","coord","split","map","Number","y","x","flipCell","count","console","log","setState","printBoard","flipCellsAround","renderBoard","defaultProps","chanceLightStartsOn"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps ={\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  };\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {hasWon: false, board: this.createBoard()};\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n\n    for(var i = 0; i < this.props.nrows; i++){\n      let row = [];\n      for(var j = 0; j < this.props.ncols; j++) {\n          row.push(false); //Math.random() < this.props.chanceLightStartsOn\n        }\n        board.push(row);\n    }\n\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y,x);\n    flipCell(y,x + 1);\n    flipCell(y,x - 1);\n    flipCell(y+1,x);\n    flipCell(y-1,x);\n\n\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    let hasWon = false;\n    let count = 0;\n\n    for(var i = 0; i < this.props.nrows; i++) {\n      for(var j = 0; j < this.props.ncols; j++) {\n        if(board[i][j] === false){\n          count++;\n          console.log(count);\n        }\n      }\n    }\n\n    if(count === (this.props.nrows * this.props.ncols)) {\n      hasWon = true;\n    }\n\n    console.log(count);\n\n    // TODO: determine is the game has been won\n\n    \n\n    this.setState({ board: board, hasWon:  hasWon});\n  }\n\n  renderBoard() {\n    let printBoard = [];\n    for(var i = 0; i < this.props.nrows; i++) {\n      let row = [];\n      for(var j = 0; j < this.props.ncols; j++) {\n        let coord = `${i}-${j}`;\n        row.push(<Cell key={coord} isLit={this.state.board[i][j]} flipCellsAroundMe={() => this.flipCellsAround(coord)} />)\n      } \n      printBoard.push(<tr key={i}>{row}</tr>);\n    }\n    return printBoard;\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    return (\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n    <div>\n      <table className=\"Board\">\n        <tbody>\n            {this.renderBoard()}\n        </tbody>\n      </table>\n\n    </div>\n\n    // TODO\n    );\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}