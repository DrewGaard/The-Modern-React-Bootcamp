{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Drew\\\\Documents\\\\The Modern React Bootcamp\\\\Lights_Out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Drew\\\\Documents\\\\The Modern React Bootcamp\\\\Lights_Out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Drew\\\\Documents\\\\The Modern React Bootcamp\\\\Lights_Out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Drew\\\\Documents\\\\The Modern React Bootcamp\\\\Lights_Out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Drew\\\\Documents\\\\The Modern React Bootcamp\\\\Lights_Out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Drew\\\\Documents\\\\The Modern React Bootcamp\\\\Lights_Out\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Drew\\\\Documents\\\\The Modern React Bootcamp\\\\Lights_Out\\\\react-lights-out-starter\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      for (var i = 0; i < this.props.nrows * this.props.ncols; i++) {\n        // for(var j = 0; j < this.props.ncols; j++) {\n        //    board[i][j] = true;\n        //  }\n        board[i] = [true];\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      //this.setState({board, hasWon});\n\n    }\n  }, {\n    key: \"renderBoard\",\n    value: function renderBoard() {\n      var printBoard;\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        for (var j = 0; j < this.props.ncols; j++) {\n          printBoard = React.createElement(\"trow\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89\n            },\n            __self: this\n          }, \" this.state.board.map(ltr => (\", React.createElement(Cell, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 90\n            },\n            __self: this\n          }), \")) \");\n        }\n      }\n\n      return printBoard;\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return (// if the game is won, just show a winning msg & render nothing else\n        // TODO\n        // make table board\n        React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, React.createElement(\"table\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, React.createElement(\"tbody\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, this.renderBoard()))) // TODO\n\n      );\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: .5\n};\nexport default Board;","map":{"version":3,"sources":["C:\\Users\\Drew\\Documents\\The Modern React Bootcamp\\Lights_Out\\react-lights-out-starter\\src\\Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","i","nrows","ncols","coord","split","map","Number","y","x","flipCell","printBoard","j","renderBoard","defaultProps","chanceLightStartsOn"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;IA0BMC,K;;;;;AAMJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN,GADiB,CAGjB;;AACA,UAAKC,KAAL,GAAa;AAACC,MAAAA,MAAM,EAAE,KAAT;AAAgBC,MAAAA,KAAK,EAAE,MAAKC,WAAL;AAAvB,KAAb;AAJiB;AAKlB;AAED;;;;;kCAEc;AACZ,UAAID,KAAK,GAAG,EAAZ,CADY,CAEZ;;AAEA,WAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAI,KAAKL,KAAL,CAAWM,KAAX,GAAmB,KAAKN,KAAL,CAAWO,KAAlD,EAA0DF,CAAC,EAA3D,EAA8D;AAC5D;AACA;AACA;AACAF,QAAAA,KAAK,CAACE,CAAD,CAAL,GAAW,CAAC,IAAD,CAAX;AACD;;AAED,aAAOF,KAAP;AACD;AAED;;;;oCAEgBK,K,EAAO;AAAA,wBACA,KAAKR,KADL;AAAA,UAChBO,KADgB,eAChBA,KADgB;AAAA,UACTD,KADS,eACTA,KADS;AAErB,UAAIH,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;;AAFqB,6BAGRK,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAHQ;AAAA;AAAA,UAGhBC,CAHgB;AAAA,UAGbC,CAHa;;AAMrB,eAASC,QAAT,CAAkBF,CAAlB,EAAqBC,CAArB,EAAwB;AACtB;AAEA,YAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGN,KAAd,IAAuBK,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGN,KAAzC,EAAgD;AAC9CH,UAAAA,KAAK,CAACS,CAAD,CAAL,CAASC,CAAT,IAAc,CAACV,KAAK,CAACS,CAAD,CAAL,CAASC,CAAT,CAAf;AACD;AACF,OAZoB,CAcrB;AAEA;AACA;AAEA;;AACD;;;kCAEa;AACZ,UAAIE,UAAJ;;AACA,WAAI,IAAIV,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,KAAKL,KAAL,CAAWM,KAA9B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,aAAI,IAAIW,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,KAAKhB,KAAL,CAAWO,KAA9B,EAAqCS,CAAC,EAAtC,EAA0C;AACxCD,UAAAA,UAAU,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACX,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADW,QAAb;AAGD;AACF;;AACD,aAAOA,UAAP;AACD;AAGD;;;;6BAES;AACP,aACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACK,KAAKE,WAAL,EADL,CADF,CADF,CANA,CAeA;;AAfA;AAiBD;;;;EAtFiBpB,S;;AAAdE,K,CACGmB,Y,GAAc;AACnBZ,EAAAA,KAAK,EAAE,CADY;AAEnBC,EAAAA,KAAK,EAAE,CAFY;AAGnBY,EAAAA,mBAAmB,EAAE;AAHF,C;AAyFvB,eAAepB,KAAf","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps ={\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: .5\n  };\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {hasWon: false, board: this.createBoard()};\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n\n    for(var i = 0; i < (this.props.nrows * this.props.ncols); i++){\n      // for(var j = 0; j < this.props.ncols; j++) {\n      //    board[i][j] = true;\n      //  }\n      board[i] = [true];\n    }\n\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    //this.setState({board, hasWon});\n  }\n\n  renderBoard() {\n    let printBoard;\n    for(var i = 0; i < this.props.nrows; i++) {\n      for(var j = 0; j < this.props.ncols; j++) {\n        printBoard = <trow> this.state.board.map(ltr => (\n          <Cell />\n        )) </trow>;\n      } \n    }\n    return printBoard;\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    return (\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n    <div>\n      <table>\n        <tbody>\n            {this.renderBoard()}\n        </tbody>\n      </table>\n\n    </div>\n\n    // TODO\n    );\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}